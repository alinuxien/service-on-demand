stages:
  - prepare
  - build
  - deploy
  - destroy

# Préparation du tag de l'image container PHP pour dépot sur le Docker Hub
# et utilisation par le Cluster Kubernetes
# Le numéro de pipeline CI_PIPELINE_ID est ajouté pour forcer la prise en compte par Kubernetes, 
# et géré automatiquement par GitLab
# Nécessite de définir les variables de CI/CD : 
# CI_REGISTRY : url de la registry Docker Hub ( ou autre )
# CI_REGISTRY_IMAGE : url du repository du projet dans la registry
# CI_REGISTRY_USER : nom d'utilisateur pour connexion à la registry
# CI_REGISTRY_PASSWORD : mot de passe pour connexion à la registry
variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID

# Préparation du manifeste Kubernetes de gestion des crédentials MySQL
# basé sur les variables de CI/CD, qu'il convient de définir : 
# MYSQL_ROOT_PASSWORD 
# MYSQL_USER
# MYSQL_PASSWORD
prepare_job:
  stage: prepare
  tags:
    - shell
  script:
    - 'sed -i "s~mysql-username:~mysql-username: $(echo -n ${MYSQL_USER} | base64) ~g" secret-mysql.yaml'
    - 'sed -i "s~mysql-password:~mysql-password: $(echo -n ${MYSQL_PASSWORD} | base64) ~g" secret-mysql.yaml'
    - 'sed -i "s~mysql-root-password:~mysql-root-password: $(echo -n ${MYSQL_ROOT_PASSWORD} | base64) ~g" secret-mysql.yaml'
  artifacts:
    paths: 
      - ./secret-mysql.yaml

# Récupération de l'image du container PHP contenant le code de l'application du développeur
# depuis la Container Registry de GitLab
# Tag de cette image pour envoi vers la registry Docker Hub 
tag_php_job:
  stage: build
  tags:
    - shell
  before_script:
  - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $DEV_REGISTRY 
  script:
    - docker pull $DEV_IMAGE_TAG
    - docker tag $DEV_IMAGE_TAG $(echo ${IMAGE_TAG})-php
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $(echo ${IMAGE_TAG})-php

# Préparation de l'image du container MySQL
build_mysql_job:
  stage: build
  tags:
    - shell
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $(echo ${IMAGE_TAG})-mysql -f Dockerfile-mysql .
    - docker push $(echo ${IMAGE_TAG})-mysql

# Récupération du fichier de configuration d'accès au Cluster Kubernetes
# Préparation des manifestes de déploiement et de services pour PHP et MySQL dans Kubernetes
# Déploiement des containers PHP et MySQL à l'aide des manifestes Kubernetes
# et du configmap pour le nom du serveur MySQL
deploy_job:
  stage: deploy 
  tags:
    - shell
  script:
    - sudo cp /home/vagrant/.kube/config /home/gitlab-runner/.kube
    - 'sed -i "s~image: PHP_IMAGE~image: $(echo ${IMAGE_TAG})-php ~g" php.yaml'
    - 'sed -i "s~image: MYSQL_IMAGE~image: $(echo ${IMAGE_TAG})-mysql ~g" mysql.yaml'
    - kubectl apply -f secret-mysql.yaml
    - kubectl apply -f mysql.yaml
    - kubectl apply -f configmap.yaml
    - kubectl apply -f php.yaml
  allow_failure: true
  # Mise à disposition des manifestes générés
  artifacts:
    paths: 
      - ./php.yaml
      - ./mysql.yaml
  # Mise à disposition d'un environnement pour accéder à l'application PHP
  environment:
    name: developement 
    url: http://kube.akrour.fr:30000/
  only:
    - master

# Nettoyage des objets Kubernetes générés, à déclechement manuel
destroy_job:
  stage: destroy 
  tags:
    - shell
  script:
    - kubectl delete -f php.yaml
    - kubectl delete -f configmap.yaml
    - kubectl delete -f mysql.yaml
    - kubectl delete -f secret-mysql.yaml
  when: manual

